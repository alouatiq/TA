# BE/Makefile
# Trading Assistant Backend - Development & Deployment Automation

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Configuration
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PYTHON := python3
VENV_DIR := venv
PIP := $(VENV_DIR)/bin/pip
PYTHON_VENV := $(VENV_DIR)/bin/python
PROJECT_NAME := trading-assistant-backend
SRC_DIR := .
REQUIREMENTS := requirements.txt
ENV_FILE := .env
ENV_EXAMPLE := .env.example

# Colors for pretty output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
NC := \033[0m # No Color

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Default target
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
.DEFAULT_GOAL := help

.PHONY: help
help: ## Show this help message
	@echo "$(CYAN)Trading Assistant Backend - Available Commands$(NC)"
	@echo "=================================================="
	@echo ""
	@echo "$(GREEN)üèóÔ∏è  Setup & Installation:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "(setup|install|deps|venv)" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(GREEN)üîë API Configuration:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "(api|key)" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(GREEN)üöÄ Running & Development:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "(run|dev|test|debug)" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(GREEN)üßπ Maintenance:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E "(clean|format|lint)" | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Setup & Installation
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

.PHONY: venv
venv: ## Create Python virtual environment
	@echo "$(BLUE)üèóÔ∏è  Creating virtual environment...$(NC)"
	@if [ ! -d "$(VENV_DIR)" ]; then \
		$(PYTHON) -m venv $(VENV_DIR); \
		echo "$(GREEN)‚úÖ Virtual environment created at $(VENV_DIR)$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Virtual environment already exists at $(VENV_DIR)$(NC)"; \
	fi

.PHONY: deps
deps: venv ## Install Python dependencies
	@echo "$(BLUE)üì¶ Installing dependencies...$(NC)"
	@$(PIP) install --upgrade pip
	@if [ -f "$(REQUIREMENTS)" ]; then \
		$(PIP) install -r $(REQUIREMENTS); \
		echo "$(GREEN)‚úÖ Dependencies installed from $(REQUIREMENTS)$(NC)"; \
	else \
		echo "$(RED)‚ùå $(REQUIREMENTS) not found$(NC)"; \
		exit 1; \
	fi

.PHONY: setup
setup: venv deps setup-env ## Complete setup (venv + deps + env file)
	@echo "$(GREEN)üéâ Setup complete! Next steps:$(NC)"
	@echo "  1. Configure API keys: $(YELLOW)make setup-api$(NC)"
	@echo "  2. Run the app: $(YELLOW)make run$(NC)"

.PHONY: setup-env
setup-env: ## Create .env file from template
	@echo "$(BLUE)‚öôÔ∏è  Setting up environment file...$(NC)"
	@if [ ! -f "$(ENV_FILE)" ]; then \
		if [ -f "$(ENV_EXAMPLE)" ]; then \
			cp $(ENV_EXAMPLE) $(ENV_FILE); \
			echo "$(GREEN)‚úÖ Created $(ENV_FILE) from $(ENV_EXAMPLE)$(NC)"; \
			echo "$(YELLOW)‚ö†Ô∏è  Please edit $(ENV_FILE) to add your API keys$(NC)"; \
		else \
			echo "$(YELLOW)‚ö†Ô∏è  $(ENV_EXAMPLE) not found, creating basic $(ENV_FILE)$(NC)"; \
			echo "# Trading Assistant API Keys" > $(ENV_FILE); \
			echo "# Add your API keys below (optional but recommended)" >> $(ENV_FILE); \
			echo "" >> $(ENV_FILE); \
			echo "# Financial Data APIs" >> $(ENV_FILE); \
			echo "TWELVEDATA_API_KEY=" >> $(ENV_FILE); \
			echo "ALPHA_VANTAGE_API_KEY=" >> $(ENV_FILE); \
			echo "CRYPTOCOMPARE_API_KEY=" >> $(ENV_FILE); \
			echo "" >> $(ENV_FILE); \
			echo "# AI APIs (for advanced features)" >> $(ENV_FILE); \
			echo "OPENAI_API_KEY=" >> $(ENV_FILE); \
			echo "ANTHROPIC_API_KEY=" >> $(ENV_FILE); \
			echo "" >> $(ENV_FILE); \
			echo "# Optional: HTTP settings" >> $(ENV_FILE); \
			echo "HTTP_UA=Mozilla/5.0 (compatible; TradingAssistant/1.0)" >> $(ENV_FILE); \
			echo "STOOQ_TIMEOUT=12" >> $(ENV_FILE); \
			echo "$(GREEN)‚úÖ Created basic $(ENV_FILE)$(NC)"; \
		fi; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  $(ENV_FILE) already exists$(NC)"; \
	fi

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# API Configuration
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

.PHONY: setup-api
setup-api: ## Interactive API key setup
	@echo "$(CYAN)üîë API Key Configuration$(NC)"
	@echo "========================================"
	@echo ""
	@echo "$(BLUE)The Trading Assistant can work with several APIs to provide better data coverage:$(NC)"
	@echo ""
	@echo "$(GREEN)üìä Financial Data APIs (Recommended):$(NC)"
	@echo "  ‚Ä¢ $(YELLOW)TwelveData$(NC) - Free tier: 800 requests/day"
	@echo "    Sign up: https://twelvedata.com/"
	@echo "  ‚Ä¢ $(YELLOW)Alpha Vantage$(NC) - Free tier: 25 requests/day" 
	@echo "    Sign up: https://www.alphavantage.co/"
	@echo "  ‚Ä¢ $(YELLOW)CryptoCompare$(NC) - Free tier: 100,000 requests/month"
	@echo "    Sign up: https://www.cryptocompare.com/"
	@echo ""
	@echo "$(PURPLE)ü§ñ AI APIs (Optional - for advanced analysis):$(NC)"
	@echo "  ‚Ä¢ $(YELLOW)OpenAI$(NC) - For GPT-powered analysis"
	@echo "    Sign up: https://platform.openai.com/"
	@echo "  ‚Ä¢ $(YELLOW)Anthropic$(NC) - For Claude-powered analysis"
	@echo "    Sign up: https://console.anthropic.com/"
	@echo ""
	@echo "$(BLUE)üìù Note: All APIs are optional. The app works without them but with limited data sources.$(NC)"
	@echo ""
	@printf "$(CYAN)Press Enter to start configuration (or Ctrl+C to skip)...$(NC)"
	@read dummy
	@$(MAKE) _interactive_api_setup

.PHONY: _interactive_api_setup
_interactive_api_setup:
	@echo "$(BLUE)Setting up API keys interactively...$(NC)"
	@if [ ! -f "$(ENV_FILE)" ]; then \
		$(MAKE) setup-env; \
	fi
	@echo ""
	@echo "$(GREEN)üìä Financial Data APIs$(NC)"
	@echo "=========================="
	@printf "Enter TwelveData API key (or press Enter to skip): "; \
	read twelvedata_key; \
	if [ ! -z "$$twelvedata_key" ]; then \
		if grep -q "TWELVEDATA_API_KEY=" $(ENV_FILE); then \
			sed -i.bak "s/TWELVEDATA_API_KEY=.*/TWELVEDATA_API_KEY=$$twelvedata_key/" $(ENV_FILE); \
		else \
			echo "TWELVEDATA_API_KEY=$$twelvedata_key" >> $(ENV_FILE); \
		fi; \
		echo "$(GREEN)‚úÖ TwelveData API key saved$(NC)"; \
	else \
		echo "$(YELLOW)‚è≠Ô∏è  TwelveData API key skipped$(NC)"; \
	fi
	@printf "Enter Alpha Vantage API key (or press Enter to skip): "; \
	read alphavantage_key; \
	if [ ! -z "$$alphavantage_key" ]; then \
		if grep -q "ALPHA_VANTAGE_API_KEY=" $(ENV_FILE); then \
			sed -i.bak "s/ALPHA_VANTAGE_API_KEY=.*/ALPHA_VANTAGE_API_KEY=$$alphavantage_key/" $(ENV_FILE); \
		else \
			echo "ALPHA_VANTAGE_API_KEY=$$alphavantage_key" >> $(ENV_FILE); \
		fi; \
		echo "$(GREEN)‚úÖ Alpha Vantage API key saved$(NC)"; \
	else \
		echo "$(YELLOW)‚è≠Ô∏è  Alpha Vantage API key skipped$(NC)"; \
	fi
	@printf "Enter CryptoCompare API key (or press Enter to skip): "; \
	read cryptocompare_key; \
	if [ ! -z "$$cryptocompare_key" ]; then \
		if grep -q "CRYPTOCOMPARE_API_KEY=" $(ENV_FILE); then \
			sed -i.bak "s/CRYPTOCOMPARE_API_KEY=.*/CRYPTOCOMPARE_API_KEY=$$cryptocompare_key/" $(ENV_FILE); \
		else \
			echo "CRYPTOCOMPARE_API_KEY=$$cryptocompare_key" >> $(ENV_FILE); \
		fi; \
		echo "$(GREEN)‚úÖ CryptoCompare API key saved$(NC)"; \
	else \
		echo "$(YELLOW)‚è≠Ô∏è  CryptoCompare API key skipped$(NC)"; \
	fi
	@echo ""
	@echo "$(PURPLE)ü§ñ AI APIs (Optional)$(NC)"
	@echo "======================"
	@printf "Enter OpenAI API key (or press Enter to skip): "; \
	read openai_key; \
	if [ ! -z "$$openai_key" ]; then \
		if grep -q "OPENAI_API_KEY=" $(ENV_FILE); then \
			sed -i.bak "s/OPENAI_API_KEY=.*/OPENAI_API_KEY=$$openai_key/" $(ENV_FILE); \
		else \
			echo "OPENAI_API_KEY=$$openai_key" >> $(ENV_FILE); \
		fi; \
		echo "$(GREEN)‚úÖ OpenAI API key saved$(NC)"; \
	else \
		echo "$(YELLOW)‚è≠Ô∏è  OpenAI API key skipped$(NC)"; \
	fi
	@printf "Enter Anthropic API key (or press Enter to skip): "; \
	read anthropic_key; \
	if [ ! -z "$$anthropic_key" ]; then \
		if grep -q "ANTHROPIC_API_KEY=" $(ENV_FILE); then \
			sed -i.bak "s/ANTHROPIC_API_KEY=.*/ANTHROPIC_API_KEY=$$anthropic_key/" $(ENV_FILE); \
		else \
			echo "ANTHROPIC_API_KEY=$$anthropic_key" >> $(ENV_FILE); \
		fi; \
		echo "$(GREEN)‚úÖ Anthropic API key saved$(NC)"; \
	else \
		echo "$(YELLOW)‚è≠Ô∏è  Anthropic API key skipped$(NC)"; \
	fi
	@if [ -f "$(ENV_FILE).bak" ]; then rm $(ENV_FILE).bak; fi
	@echo ""
	@echo "$(GREEN)üéâ API configuration complete!$(NC)"
	@echo "$(BLUE)üí° You can run 'make check-api' to verify your configuration$(NC)"

.PHONY: check-api
check-api: venv ## Check API key configuration status
	@echo "$(CYAN)üîç Checking API Configuration$(NC)"
	@echo "================================="
	@if [ -f "$(ENV_FILE)" ]; then \
		echo "üìä Financial Data APIs:"; \
		for api_info in "TWELVEDATA_API_KEY TwelveData" "ALPHA_VANTAGE_API_KEY Alpha_Vantage" "CRYPTOCOMPARE_API_KEY CryptoCompare"; do \
			api_key=$$(echo $$api_info | cut -d' ' -f1); \
			api_name=$$(echo $$api_info | cut -d' ' -f2); \
			if grep -q "^$$api_key=" $(ENV_FILE) && [ -n "$$(grep "^$$api_key=" $(ENV_FILE) | cut -d'=' -f2 | tr -d ' ')" ]; then \
				echo "   $$api_name: ‚úÖ Configured"; \
			else \
				echo "   $$api_name: ‚ùå Not configured"; \
			fi; \
		done; \
		echo ""; \
		echo "ü§ñ AI APIs:"; \
		for api_info in "OPENAI_API_KEY OpenAI" "ANTHROPIC_API_KEY Anthropic"; do \
			api_key=$$(echo $$api_info | cut -d' ' -f1); \
			api_name=$$(echo $$api_info | cut -d' ' -f2); \
			if grep -q "^$$api_key=" $(ENV_FILE) && [ -n "$$(grep "^$$api_key=" $(ENV_FILE) | cut -d'=' -f2 | tr -d ' ')" ]; then \
				echo "   $$api_name: ‚úÖ Configured"; \
			else \
				echo "   $$api_name: ‚ùå Not configured"; \
			fi; \
		done; \
		echo ""; \
		echo "üí° To configure missing APIs: make setup-api"; \
	else \
		echo "‚ùå .env file not found. Run: make setup-env"; \
	fi

.PHONY: show-api-info
show-api-info: ## Show information about supported APIs
	@echo "$(CYAN)üìã Supported APIs Information$(NC)"
	@echo "=================================="
	@echo ""
	@echo "$(GREEN)üìä Financial Data APIs:$(NC)"
	@echo ""
	@echo "$(YELLOW)TwelveData$(NC) - Real-time and historical financial data"
	@echo "  ‚Ä¢ Free tier: 800 requests/day"
	@echo "  ‚Ä¢ Covers: Stocks, Forex, Crypto, Commodities"
	@echo "  ‚Ä¢ Sign up: https://twelvedata.com/"
	@echo ""
	@echo "$(YELLOW)Alpha Vantage$(NC) - Financial market data"
	@echo "  ‚Ä¢ Free tier: 25 requests/day (500 requests/day with registration)"
	@echo "  ‚Ä¢ Covers: Stocks, Forex, Crypto, Technical indicators"
	@echo "  ‚Ä¢ Sign up: https://www.alphavantage.co/"
	@echo ""
	@echo "$(YELLOW)CryptoCompare$(NC) - Cryptocurrency data"
	@echo "  ‚Ä¢ Free tier: 100,000 requests/month"
	@echo "  ‚Ä¢ Covers: All major cryptocurrencies, historical data"
	@echo "  ‚Ä¢ Sign up: https://www.cryptocompare.com/"
	@echo ""
	@echo "$(PURPLE)ü§ñ AI APIs (Optional):$(NC)"
	@echo ""
	@echo "$(YELLOW)OpenAI$(NC) - GPT models for analysis"
	@echo "  ‚Ä¢ Usage-based pricing"
	@echo "  ‚Ä¢ Used for: Advanced market analysis, strategy suggestions"
	@echo "  ‚Ä¢ Sign up: https://platform.openai.com/"
	@echo ""
	@echo "$(YELLOW)Anthropic$(NC) - Claude models for analysis"
	@echo "  ‚Ä¢ Usage-based pricing" 
	@echo "  ‚Ä¢ Used for: Market analysis, research assistance"
	@echo "  ‚Ä¢ Sign up: https://console.anthropic.com/"
	@echo ""
	@echo "$(BLUE)üí° Note: The app works without any API keys, using free data sources,$(NC)"
	@echo "$(BLUE)   but having API keys provides better data coverage and reliability.$(NC)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Running & Development
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

.PHONY: run
run: venv ## Run the trading assistant
	@echo "$(GREEN)üöÄ Running the trading assistant...$(NC)"
	@if [ ! -f "$(ENV_FILE)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  No .env file found. Creating one...$(NC)"; \
		$(MAKE) setup-env; \
	fi
	@cd $(SRC_DIR) && $(PYTHON_VENV) -m app_cli.main

.PHONY: run-debug
run-debug: venv ## Run with debug logging
	@echo "$(GREEN)üêõ Running with debug logging...$(NC)"
	@cd $(SRC_DIR) && PYTHONPATH=. DEBUG=1 $(PYTHON_VENV) -m app_cli.main

.PHONY: dev
dev: venv ## Run in development mode with auto-reload
	@echo "$(GREEN)üîÑ Running in development mode...$(NC)"
	@echo "$(YELLOW)Note: Auto-reload not implemented yet. Use run-debug for debugging.$(NC)"
	@$(MAKE) run-debug

.PHONY: test
test: venv ## Run tests
	@echo "$(GREEN)üß™ Running tests...$(NC)"
	@cd $(SRC_DIR) && $(PYTHON_VENV) -m pytest tests/ -v

.PHONY: test-coverage
test-coverage: venv ## Run tests with coverage report
	@echo "$(GREEN)üìä Running tests with coverage...$(NC)"
	@cd $(SRC_DIR) && $(PYTHON_VENV) -m pytest tests/ --cov=. --cov-report=html --cov-report=term

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Code Quality & Maintenance
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

.PHONY: format
format: venv ## Format code with black and isort
	@echo "$(BLUE)üé® Formatting code...$(NC)"
	@cd $(SRC_DIR) && $(PYTHON_VENV) -m black .
	@cd $(SRC_DIR) && $(PYTHON_VENV) -m isort .
	@echo "$(GREEN)‚úÖ Code formatted$(NC)"

.PHONY: lint
lint: venv ## Run linting with flake8
	@echo "$(BLUE)üîç Running linter...$(NC)"
	@cd $(SRC_DIR) && $(PYTHON_VENV) -m flake8 .

.PHONY: type-check
type-check: venv ## Run type checking with mypy
	@echo "$(BLUE)üè∑Ô∏è  Running type checker...$(NC)"
	@cd $(SRC_DIR) && $(PYTHON_VENV) -m mypy .

.PHONY: clean
clean: ## Clean up temporary files and caches
	@echo "$(BLUE)üßπ Cleaning up...$(NC)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -delete
	@find . -type d -name "*.egg-info" -exec rm -rf {} +
	@find . -type f -name ".coverage" -delete
	@find . -type d -name "htmlcov" -exec rm -rf {} +
	@find . -type d -name ".pytest_cache" -exec rm -rf {} +
	@find . -type d -name ".mypy_cache" -exec rm -rf {} +
	@echo "$(GREEN)‚úÖ Cleanup complete$(NC)"

.PHONY: clean-all
clean-all: clean ## Clean everything including virtual environment
	@echo "$(BLUE)üóëÔ∏è  Removing virtual environment...$(NC)"
	@rm -rf $(VENV_DIR)
	@echo "$(GREEN)‚úÖ Complete cleanup done$(NC)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Information & Status
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

.PHONY: status
status: ## Show project status and configuration
	@echo "$(CYAN)üìã Project Status$(NC)"
	@echo "=================="
	@echo ""
	@echo "$(BLUE)Environment:$(NC)"
	@echo "  Python: $$($(PYTHON) --version 2>&1)"
	@echo "  Virtual Environment: $$(if [ -d "$(VENV_DIR)" ]; then echo "‚úÖ Present"; else echo "‚ùå Missing"; fi)"
	@echo "  Requirements: $$(if [ -f "$(REQUIREMENTS)" ]; then echo "‚úÖ Found"; else echo "‚ùå Missing"; fi)"
	@echo "  Environment File: $$(if [ -f "$(ENV_FILE)" ]; then echo "‚úÖ Found"; else echo "‚ùå Missing"; fi)"
	@echo ""
	@if [ -f "$(ENV_FILE)" ]; then \
		echo "$(BLUE)API Configuration:$(NC)"; \
		configured_count=0; \
		total_count=5; \
		for api_info in "TWELVEDATA_API_KEY TwelveData" "ALPHA_VANTAGE_API_KEY AlphaVantage" "CRYPTOCOMPARE_API_KEY CryptoCompare" "OPENAI_API_KEY OpenAI" "ANTHROPIC_API_KEY Anthropic"; do \
			api_key=$$(echo $$api_info | cut -d' ' -f1); \
			api_name=$$(echo $$api_info | cut -d' ' -f2); \
			if grep -q "^$$api_key=" $(ENV_FILE) && [ -n "$$(grep "^$$api_key=" $(ENV_FILE) | cut -d'=' -f2 | tr -d ' ')" ]; then \
				echo "  $$api_name: ‚úÖ"; \
				configured_count=$$((configured_count + 1)); \
			else \
				echo "  $$api_name: ‚ùå"; \
			fi; \
		done; \
		echo "  Total: $$configured_count/$$total_count APIs configured"; \
	fi
	@echo ""
	@echo "$(BLUE)Quick Commands:$(NC)"
	@echo "  Setup: make setup"
	@echo "  Configure APIs: make setup-api"
	@echo "  Run: make run"
	@echo "  Help: make help"

.PHONY: version
version: ## Show version information
	@echo "$(CYAN)Trading Assistant Backend$(NC)"
	@echo "=========================="
	@echo "Version: 1.0.0-beta"
	@echo "Python: $$($(PYTHON) --version 2>&1)"
	@echo "Make: $$(make --version | head -n1)"
	@echo ""
	@echo "$(BLUE)For more information, visit: https://github.com/your-repo/trading-assistant$(NC)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Documentation
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

.PHONY: docs
docs: venv ## Generate documentation
	@echo "$(BLUE)üìö Generating documentation...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Documentation generation not implemented yet$(NC)"
	@echo "$(BLUE)üí° For now, see README.md and inline code documentation$(NC)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Docker Support (if needed in the future)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

.PHONY: docker-build
docker-build: ## Build Docker image
	@echo "$(BLUE)üê≥ Building Docker image...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Docker support not implemented yet$(NC)"

.PHONY: docker-run
docker-run: ## Run in Docker container
	@echo "$(BLUE)üê≥ Running in Docker...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Docker support not implemented yet$(NC)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Backup & Export
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

.PHONY: backup-config
backup-config: ## Backup configuration files
	@echo "$(BLUE)üíæ Backing up configuration...$(NC)"
	@timestamp=$$(date +%Y%m%d_%H%M%S); \
	backup_dir="backup_$$timestamp"; \
	mkdir -p "$$backup_dir"; \
	if [ -f "$(ENV_FILE)" ]; then cp $(ENV_FILE) "$$backup_dir/"; fi; \
	if [ -f "$(REQUIREMENTS)" ]; then cp $(REQUIREMENTS) "$$backup_dir/"; fi; \
	echo "$(GREEN)‚úÖ Configuration backed up to $$backup_dir$(NC)"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Help Functions
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

.PHONY: list-targets
list-targets: ## List all available make targets
	@echo "$(CYAN)Available Make Targets:$(NC)"
	@$(MAKE) -pRrq -f $(MAKEFILE_LIST) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$'
